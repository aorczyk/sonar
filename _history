{"entries":[{"timestamp":1741425074637,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let latestCommands: { [key: string]: number } = {}\n\nlet mode = 0;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n};\n\nfunction switchMode(newMode: number) {\n    bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    if (mode != newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;0;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br;')\n            bluetooth.uartWriteLine('vc;import_end;')\n            mode = 0;\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            // if (mode == 0) {\n            //     wuKong.setServoSpeed(wuKong.ServoList.S1, commandValue)\n            // } else if (mode == 1 || mode == 2) {\n            //     wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n            // }\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"1\" || commandName == \"2\") {\n            if (commandName == \"1\") {\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                switchMode(1)\n            }\n        }\n    }\n})"],[1,"\n"]],"start1":0,"start2":0,"length1":2339,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"microphone"],[1,"radio"],[0,"\": \""]],"start1":96,"start2":96,"length1":18,"length2":13},{"diffs":[[0,"   \""],[-1,"bluetooth\": \"*\",\n        \"wuKong"],[1,"microphone"],[0,"\": \""],[-1,"github:elecfreaks/pxt-wukong#v1.5.8"],[1,"*"],[0,"\"\n  "]],"start1":118,"start2":118,"length1":79,"length2":23},{"diffs":[[0,"   \""],[-1,"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }"],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":286,"start2":286,"length1":255,"length2":31}]}]},{"timestamp":1741425463043,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e = "],[-1,"nul"],[1,"0"],[0,";\n\nc"]],"start1":59,"start2":59,"length1":11,"length2":9}]}]},{"timestamp":1741426112243,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"de = nul"],[-1,"l"],[0,";\n\nconst"]],"start1":58,"start2":58,"length1":17,"length2":16}]}]},{"timestamp":1741426113694,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"mode"],[-1,": number = null;\nlet lastMode: number"],[0," = n"]],"start1":56,"start2":56,"length1":45,"length2":8},{"diffs":[[0,") {\n"],[-1,"    lastMode = newMode\n"],[0,"    "]],"start1":179,"start2":179,"length1":31,"length2":8},{"diffs":[[0,"(mode !="],[-1,"="],[0," newMode"]],"start1":258,"start2":258,"length1":17,"length2":16},{"diffs":[[0,";')\n"],[-1,"    } else {\n        mode = null\n"],[0,"    "]],"start1":372,"start2":372,"length1":41,"length2":8},{"diffs":[[0,"\"jry\") {\n       "],[1,"     // if (mode == 0) {\n            //     wuKong.setServoSpeed(wuKong.ServoList.S1, commandValue)\n            // } else if (mode == 1 || mode == 2) {\n            //"],[0,"     wuKong.setM"]],"start1":1687,"start2":1687,"length1":32,"length2":198},{"diffs":[[0,", commandValue)\n"],[1,"            // }\n"],[0,"        } else i"]],"start1":1914,"start2":1914,"length1":32,"length2":49},{"diffs":[[0,"    "],[-1,"if (mode != 0) {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 10)\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                switchMode(1)\n            }\n        }\n    }\n})\n\n// Queue\nlet \nbasic.forever(function () {\n\n})\n\nbasic.forever(function () {\n    if (mode == 0) {\n        sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)"],[1,"switchMode(0)\n            } else if (commandName == \"2\") {\n                switchMode(1)\n            }\n        }"],[0,"\n   "]],"start1":2217,"start2":2217,"length1":505,"length2":120}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"5.8\""],[-1,",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\""],[0,"\n   "]],"start1":195,"start2":195,"length1":66,"length2":8}]}]},{"timestamp":1741426727728,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"let "],[-1,"queue"],[0,"\nbas"]],"start1":2472,"start2":2472,"length1":13,"length2":8}]}]},{"timestamp":1741426734885,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"port_end;')\n"],[1,"            mode = 0;\n"],[0,"        } el"]],"start1":1667,"start2":1667,"length1":24,"length2":46},{"diffs":[[0,"let "],[-1,"sendQueue: string[] = []"],[1,"queue"],[0,"\nbas"]],"start1":2472,"start2":2472,"length1":32,"length2":13},{"diffs":[[0,") {\n"],[-1,"    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue[0])\n        basic.pause(50)\n    }"],[0,"\n})\n"]],"start1":2506,"start2":2506,"length1":113,"length2":8},{"diffs":[[0,") {\n"],[-1,"        let row = [\n            input.runningTime(),\n    "],[0,"    "]],"start1":2560,"start2":2560,"length1":65,"length2":8},{"diffs":[[0,"rs)\n"],[-1,"        ]\n\n        sendQueue.push(row.join(';'))\n\n        basic.pause(50)\n"],[0,"    "]],"start1":2631,"start2":2631,"length1":82,"length2":8}]}]},{"timestamp":1741427221465,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"endQueue"],[1,"[0]"],[0,")\n      "]],"start1":2570,"start2":2570,"length1":16,"length2":19}]}]},{"timestamp":1741428138513,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ueue"],[-1,".shift"],[0,")\n  "]],"start1":2574,"start2":2574,"length1":14,"length2":8}]}]},{"timestamp":1741428140292,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"};\n\n"],[-1,"let minDistance = 10;\nlet maxDistance = 50;\nlet rotationSpeed = 10;\n\n"],[0,"func"]],"start1":177,"start2":177,"length1":77,"length2":8},{"diffs":[[0,"ue.shift"],[-1,"()"],[0,")\n      "]],"start1":2576,"start2":2576,"length1":18,"length2":16},{"diffs":[[0,"  }\n})\n\n"],[-1,"\n\n"],[0,"basic.fo"]],"start1":2612,"start2":2612,"length1":18,"length2":16},{"diffs":[[0,"let "],[-1,"distance ="],[1,"row = [\n            input.runningTime(),\n           "],[0," son"]],"start1":2677,"start2":2677,"length1":18,"length2":60},{"diffs":[[0,"    "],[-1,"\n        if (distance > minDistance && distance < maxDistance) {\n            let row = [\n                input.runningTime(),\n                distance\n            ]\n\n    "],[1,"]\n\n"],[0,"    "]],"start1":2801,"start2":2801,"length1":178,"length2":11},{"diffs":[[0,"in('"],[-1,","],[1,";"],[0,"'))\n"],[-1,"    "],[1,"\n"],[0,"    "]],"start1":2837,"start2":2837,"length1":17,"length2":14},{"diffs":[[0,"    "],[-1,"    }\n    }\n})\n\n\nfunction rotationDurationMeasurement() {\n    let startTime = input.runningTime();\n}"],[1,"}\n})"]],"start1":2871,"start2":2871,"length1":104,"length2":8}]}]},{"timestamp":1741428737218,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," 10;"],[-1,"\nlet rotationDuration = 0;"],[0,"\n\nfu"]],"start1":244,"start2":244,"length1":34,"length2":8},{"diffs":[[0,";')\n"],[-1,"            bluetooth.uartWriteLine('vc;b;5;0;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;3;1;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;0;0;4;')\n"],[0,"    "]],"start1":1539,"start2":1539,"length1":255,"length2":8},{"diffs":[[0,"r,br"],[-1,",bl"],[0,";')\n"]],"start1":1686,"start2":1686,"length1":11,"length2":8},{"diffs":[[0,"torList.M1, "],[-1,"rotationSpeed"],[1,"commandValue"],[0,")\n        } "]],"start1":2036,"start2":2036,"length1":37,"length2":36},{"diffs":[[0,"(1)\n"],[-1,"            } else if (commandName == \"3\") {\n                switchMode(3)\n"],[0,"    "]],"start1":2472,"start2":2472,"length1":83,"length2":8},{"diffs":[[0,"Time"],[-1,": number;\n    let endTime: number;\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n    let nr = 0;\n\n    while (!startTime && !endTime) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < 10) {\n            if (!startTime) {\n                startTime =  input.runningTime()\n            } else {\n                endTime = input.runningTime()\n            }\n        }\n\n        basic.pause(50)\n    }\n\n    rotationDuration = endTime - startTime\n\n    sendQueue.push([null, null, rotationDuration].join(','))"],[1," = input.runningTime();"],[0,"\n}"]],"start1":3147,"start2":3147,"length1":595,"length2":29}]}]},{"timestamp":1741429246371,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"hMode(3)"],[-1,"\n\n                "],[0,"\n       "]],"start1":2819,"start2":2819,"length1":34,"length2":16}]}]},{"timestamp":1741429946042,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"if (mode != 0) {"],[0,"\n       "]],"start1":2837,"start2":2837,"length1":32,"length2":16}]}]},{"timestamp":1741429946951,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ode "],[-1,"== 3"],[1,"!= 0"],[0,") {\n"],[-1,"                    rotationDurationMeasurement()\n                }\n"],[0,"    "]],"start1":2850,"start2":2850,"length1":84,"length2":16},{"diffs":[[0,"Time"],[-1," && mode == 3"],[0,") {\n"]],"start1":3680,"start2":3680,"length1":21,"length2":8},{"diffs":[[0," }\n\n"],[-1,"    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n"],[0,"    "]],"start1":4018,"start2":4018,"length1":58,"length2":8}]}]},{"timestamp":1741430014565,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  1: 2,\n"],[-1,"    1: 2,\n"],[0,"};\n\nlet "]],"start1":169,"start2":169,"length1":26,"length2":16}]}]},{"timestamp":1741434438314,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," 2,\n    "],[-1,"2"],[1,"1"],[0,": 2,\n};\n"]],"start1":173,"start2":173,"length1":17,"length2":17}]}]},{"timestamp":1741434443481,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n    2: "],[-1,"3"],[1,"2"],[0,",\n};\n\nle"]],"start1":176,"start2":176,"length1":17,"length2":17},{"diffs":[[0,"mode == "],[-1,"2"],[1,"3"],[0,") {\n    "]],"start1":2859,"start2":2859,"length1":17,"length2":17}]}]},{"timestamp":1741434455358,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"tchMode("],[-1,"2"],[1,"3"],[0,")\n\n     "]],"start1":2827,"start2":2827,"length1":17,"length2":17}]}]},{"timestamp":1741435934455,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e =="],[-1," \"2\" || commandName =="],[0," \"2\""]],"start1":2400,"start2":2400,"length1":30,"length2":8}]}]},{"timestamp":1741436002028,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"commandName == \""],[-1,"3"],[1,"2"],[0,"\") {\n           "]],"start1":2412,"start2":2412,"length1":33,"length2":33},{"diffs":[[0,": number"],[-1," = 0"],[0,";\n    le"]],"start1":3637,"start2":3637,"length1":20,"length2":16},{"diffs":[[0,": number"],[-1," = 0"],[0,";\n\n    w"]],"start1":3662,"start2":3662,"length1":20,"length2":16},{"diffs":[[0,"= 0;"],[-1,"\n    let trigger = false;"],[0,"\n\n  "]],"start1":3745,"start2":3745,"length1":33,"length2":8},{"diffs":[[0,"  while "],[-1,"("],[0,"(!startT"]],"start1":3753,"start2":3753,"length1":17,"length2":16},{"diffs":[[0,"artTime "],[-1,"||"],[1,"&&"],[0," !endTim"]],"start1":3765,"start2":3765,"length1":18,"length2":18},{"diffs":[[0,"!endTime"],[-1,")"],[0," && mode"]],"start1":3776,"start2":3776,"length1":17,"length2":16},{"diffs":[[0,"Time && mode == "],[-1,"2"],[1,"3"],[0,") {\n        let "]],"start1":3780,"start2":3780,"length1":33,"length2":33},{"diffs":[[0,") {\n"],[-1,"            if (trigger ==)\n"],[0,"    "]],"start1":3929,"start2":3929,"length1":36,"length2":8},{"diffs":[[0,"   }"],[-1,"\n\n            trigger = true"],[0,"\n   "]],"start1":4088,"start2":4088,"length1":36,"length2":8},{"diffs":[[0,"n(','))\n"],[-1,"    switchMode(2)\n"],[0,"}"]],"start1":4282,"start2":4282,"length1":27,"length2":9}]}]},{"timestamp":1741436600273,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"            wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n"],[0,"    "]],"start1":1223,"start2":1223,"length1":66,"length2":8},{"diffs":[[0,") {\n"],[-1,"                switchMode(0)\n            } else if (commandName == \"2\") {\n"],[0,"    "]],"start1":2468,"start2":2468,"length1":83,"length2":8},{"diffs":[[0,"mode != "],[-1,"1"],[1,"0"],[0,") {\n    "]],"start1":2492,"start2":2492,"length1":17,"length2":17},{"diffs":[[0,"torList.M1, "],[-1,"rotationSpeed"],[1,"10"],[0,")\n          "]],"start1":2555,"start2":2555,"length1":37,"length2":26},{"diffs":[[0,"               }"],[1,"\n\n                switchMode(0)\n            } else if (commandName == \"2\") {"],[0,"\n               "]],"start1":2662,"start2":2662,"length1":32,"length2":108},{"diffs":[[0,"        "],[-1," //"],[0," if (mod"]],"start1":2868,"start2":2868,"length1":19,"length2":16},{"diffs":[[0,"        "],[-1," //"],[0,"     rot"]],"start1":2901,"start2":2901,"length1":19,"length2":16},{"diffs":[[0,"    "],[-1," //"],[0," }\n "]],"start1":2955,"start2":2955,"length1":11,"length2":8},{"diffs":[[0,"})\n\n"],[-1,"basic.forever(function () {\n    if (mode == 0) {\n        \n    }\n})"],[0,"\n\nba"]],"start1":3173,"start2":3173,"length1":74,"length2":8},{"diffs":[[0,"if ("],[-1,"!"],[0,"trigger"],[-1,") {\n    "],[1," ==)\n"],[0,"    "]],"start1":3980,"start2":3980,"length1":24,"length2":20},{"diffs":[[0,"        "],[-1," "],[-1,"   "],[0,"startTim"]],"start1":4034,"start2":4034,"length1":20,"length2":16},{"diffs":[[0," startTime ="],[1," "],[0," input.runni"]],"start1":4041,"start2":4041,"length1":24,"length2":25},{"diffs":[[0,"e()\n            "],[-1,"    "],[0,"} else {\n       "]],"start1":4071,"start2":4071,"length1":36,"length2":32},{"diffs":[[0,"        "],[-1,"   "],[-1," "],[0,"endTime "]],"start1":4104,"start2":4104,"length1":20,"length2":16},{"diffs":[[0,"gTime()\n"],[-1,"                }\n"],[0,"        "]],"start1":4134,"start2":4134,"length1":34,"length2":16},{"diffs":[[0,"   }"],[-1," else {\n            trigger = false\n        }"],[0,"\n\n  "]],"start1":4189,"start2":4189,"length1":53,"length2":8}]}]},{"timestamp":1741437348065,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n})\n\n"],[-1,"\n\n"],[0,"basic.fo"]],"start1":3314,"start2":3314,"length1":18,"length2":16}]}]},{"timestamp":1741437352918,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"== 0"],[-1," && signalFrequency"],[0,") {\n"]],"start1":3295,"start2":3295,"length1":27,"length2":8},{"diffs":[[0,"})\n\n"],[-1,"let signalFrequency = 0;"],[0,"\n\nba"]],"start1":3318,"start2":3318,"length1":32,"length2":8},{"diffs":[[0," ]\n\n"],[-1,"            if (distance < 40) {\n                signalFrequency = 500\n            }\n\n"],[0,"    "]],"start1":3629,"start2":3629,"length1":94,"length2":8},{"diffs":[[0,"50)\n"],[-1,"        } else {\n            signalFrequency = 0\n"],[0,"    "]],"start1":3699,"start2":3699,"length1":57,"length2":8}]}]},{"timestamp":1741438047201,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[1,"if (distance < 40) {\n                signalFrequency = 500\n            }"],[0,"\n\n      "]],"start1":3680,"start2":3680,"length1":16,"length2":88}]}]},{"timestamp":1741438241377,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"0;\n\n"],[-1,"music.setVolume(50)\n\n\n"],[0,"func"]],"start1":282,"start2":282,"length1":30,"length2":8},{"diffs":[[0,"   }\n})\n"],[-1," "],[0,"\nbasic.f"]],"start1":3245,"start2":3245,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"music.play(music.tonePlayable(Note.C, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n        basic.pause(signalFrequency)"],[0,"\n   "]],"start1":3326,"start2":3326,"length1":145,"length2":8},{"diffs":[[0,"    "],[-1,"signalFrequency = 25 * distance - 300"],[0,"\n\n  "]],"start1":3684,"start2":3684,"length1":45,"length2":8}]}]},{"timestamp":1741438712994,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ode\n"],[-1,"    if (modeToButton[mode]) {\n    "],[0,"    "]],"start1":366,"start2":366,"length1":42,"length2":8},{"diffs":[[0,";')\n"],[-1,"    }\n    \n"],[0,"    "]],"start1":434,"start2":434,"length1":19,"length2":8}]}]},{"timestamp":1741439001102,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,";0;')\n    }\n"],[1,"    "],[0,"\n    if (mod"]],"start1":466,"start2":466,"length1":24,"length2":28},{"diffs":[[0,"on () {\n"],[-1,"    \n"],[0,"    if ("]],"start1":3342,"start2":3342,"length1":21,"length2":16}]}]},{"timestamp":1741439677189,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"r(function () {\n"],[1,"    \n"],[0,"    if (mode == "]],"start1":3330,"start2":3330,"length1":32,"length2":37}]}]},{"timestamp":1741439682038,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n})\n"],[-1,"\nlet lastSignalTime = 0;\n"],[1," "],[0,"\nbas"]],"start1":3312,"start2":3312,"length1":33,"length2":9},{"diffs":[[0,") {\n"],[-1,"        if (input.runningTime() - lastSignalTime - signalFrequency > 0) {\n    "],[0,"    "]],"start1":3382,"start2":3382,"length1":86,"length2":8},{"diffs":[[0,"    "],[-1,"    lastSignalTime = input.runningTime()\n        }"],[1,"basic.pause(signalFrequency)"],[0,"\n   "]],"start1":3499,"start2":3499,"length1":58,"length2":36},{"diffs":[[0," if (distance > "],[-1,"0"],[1,"minDistance"],[0," && distance < m"]],"start1":3719,"start2":3719,"length1":33,"length2":43},{"diffs":[[0,".join(','))\n"],[1,"            basic.pause(50)\n"],[0,"        } el"]],"start1":3958,"start2":3958,"length1":24,"length2":52},{"diffs":[[0,"ncy = 0\n"],[1,""],[0,"        "]],"start1":4039,"start2":4039,"length1":16,"length2":16},{"diffs":[[0,"   }"],[-1,"\n\n        basic.pause(100)"],[0,"\n   "]],"start1":4052,"start2":4052,"length1":34,"length2":8}]}]},{"timestamp":1741440093637,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"Distance) {\n"],[1,"            let row = [\n                input.runningTime(),\n                distance\n            ]\n\n"],[0,"            "]],"start1":3878,"start2":3878,"length1":24,"length2":125},{"diffs":[[0,"ush("],[-1,"[input.runningTime(), distance]"],[1,"row"],[0,".joi"]],"start1":4065,"start2":4065,"length1":39,"length2":11},{"diffs":[[0,"     }\n\n"],[-1,"\n"],[0,"        "]],"start1":4136,"start2":4136,"length1":17,"length2":16},{"diffs":[[0,"c.pause("],[-1,"2"],[1,"1"],[0,"00)\n    "]],"start1":4156,"start2":4156,"length1":17,"length2":17}]}]},{"timestamp":1741440530236,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," = 0\n        }\n\n"],[1,"\n"],[0,"        basic.pa"]],"start1":4055,"start2":4055,"length1":32,"length2":33}]}]},{"timestamp":1741442721837,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n               "],[1," //"],[0," if (mode == 2) "]],"start1":2991,"start2":2991,"length1":32,"length2":35},{"diffs":[[0,"            "],[1," //"],[0,"     rotatio"]],"start1":3031,"start2":3031,"length1":24,"length2":27},{"diffs":[[0,"\n               "],[1," //"],[0," }\n            }"]],"start1":3080,"start2":3080,"length1":32,"length2":35}]}]},{"timestamp":1741442789600,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"= 0;"],[-1,"\nlet signalFrequency = 0;\nlet sonarStartTime = 0;"],[0,"\n\nmu"]],"start1":280,"start2":280,"length1":57,"length2":8},{"diffs":[[0,") {\n"],[-1,"                    sonarStartTime = input.runningTime()\n"],[0,"    "]],"start1":2697,"start2":2697,"length1":65,"length2":8},{"diffs":[[0,"  }\n})\n\n"],[1,"let signalFrequency = 0;\n"],[0,"\nbasic.f"]],"start1":3649,"start2":3649,"length1":16,"length2":41},{"diffs":[[0,"300\n"],[-1,"            let angle = ((input.runningTime() - sonarStartTime) % rotationDuration) * 360 / "],[0,"\n"],[1,""],[0,"    "]],"start1":3927,"start2":3927,"length1":101,"length2":9},{"diffs":[[0,"00)\n"],[-1,"    } else if (mode == 1) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < maxDistance) {\n\n            sendQueue.push([input.runningTime(), distance].join(','))\n        }\n\n        basic.pause(100)\n"],[0,"    "]],"start1":4083,"start2":4083,"length1":284,"length2":8},{"diffs":[[0,"ush("],[-1,"'rotation;' +"],[1,"[null, null,"],[0," rot"]],"start1":4932,"start2":4932,"length1":21,"length2":20},{"diffs":[[0,"Duration"],[1,"].join(',')"],[0,")\n    sw"]],"start1":4957,"start2":4957,"length1":16,"length2":27}]}]},{"timestamp":1741443380183,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"('vc;sr;"],[-1,"1"],[1,"0"],[0,";-100;10"]],"start1":1536,"start2":1536,"length1":17,"length2":17},{"diffs":[[0,"torList.M1, "],[-1,"commandValue"],[1,"rotationSpeed"],[0,")\n        } "]],"start1":2492,"start2":2492,"length1":36,"length2":37},{"diffs":[[0,") {\n"],[-1,"                    if (rotationDuration) {\n    "],[0,"    "]],"start1":2746,"start2":2746,"length1":56,"length2":8},{"diffs":[[0,"t.runningTime()\n"],[-1,"    "],[0,"                "]],"start1":2791,"start2":2791,"length1":36,"length2":32},{"diffs":[[0,"ed)\n"],[-1,"                    }\n"],[0,"    "]],"start1":2880,"start2":2880,"length1":30,"length2":8},{"diffs":[[0,"})\n\n"],[-1,"let angleCounter = 0;\n"],[0,"\nbas"]],"start1":3759,"start2":3759,"length1":30,"length2":8},{"diffs":[[0,"e - 300\n"],[1,"            let angle = ((input.runningTime() - sonarStartTime) % rotationDuration) * 360 / \n"],[0,"        "]],"start1":4004,"start2":4004,"length1":16,"length2":109},{"diffs":[[0,"ers)"],[-1,"\n        let angle = ((input.runningTime() - sonarStartTime) % rotationDuration) * 360 / rotationDuration"],[0,"\n\n  "]],"start1":4369,"start2":4369,"length1":113,"length2":8},{"diffs":[[0,"ance"],[-1," || angleCounter >="],[0,") {\n"],[1,"\n"],[0,"    "]],"start1":4421,"start2":4421,"length1":31,"length2":13},{"diffs":[[0,"ance"],[-1,", angle"],[0,"].jo"]],"start1":4483,"start2":4483,"length1":15,"length2":8}]}]},{"timestamp":1741443980015,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"})\n\nlet "],[-1,"lastAngle"],[1,"angleCounter"],[0," = 0;\n\nb"]],"start1":3832,"start2":3832,"length1":25,"length2":28},{"diffs":[[0,"on\n\n"],[-1,"        let angleCounter = angle - lastAngle;\n\n        if (angleCounter < 0) {\n            angleCounter = 360 + angle - lastAngle;\n        }\n\n"],[0,"    "]],"start1":4478,"start2":4478,"length1":150,"length2":8},{"diffs":[[0," angleCounter >="],[-1," 10"],[0,") {\n            "]],"start1":4535,"start2":4535,"length1":35,"length2":32},{"diffs":[[0,"gTime(),"],[-1," angle,"],[0," distanc"]],"start1":4595,"start2":4595,"length1":23,"length2":16},{"diffs":[[0,"Time(), distance"],[1,", angle"],[0,"].join(','))\n\n  "]],"start1":4596,"start2":4596,"length1":32,"length2":39},{"diffs":[[0,",'))"],[-1,"\n\n            lastAngle = angle;\n        } else if (angleCounter >= 10) {\n            sendQueue.push([input.runningTime(), angle, 0].join(','))\n            lastAngle = angle;"],[0,"\n   "]],"start1":4627,"start2":4627,"length1":182,"length2":8}]}]},{"timestamp":1741444538410,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"d = "],[-1,"-5"],[1,"10"],[0,";\nle"]],"start1":251,"start2":251,"length1":10,"length2":10},{"diffs":[[0,"= 0;"],[-1,"\nlet triggerAngle = 5;"],[0,"\n\nba"]],"start1":3850,"start2":3850,"length1":30,"length2":8},{"diffs":[[0,"eCounter >= "],[-1,"triggerAngle"],[1,"10"],[0,") {\n        "]],"start1":4679,"start2":4679,"length1":36,"length2":26},{"diffs":[[0," >= "],[-1,"triggerAngle"],[1,"10"],[0,") {\n"]],"start1":4837,"start2":4837,"length1":20,"length2":10}]}]},{"timestamp":1741444936111,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," = -"],[-1,"9"],[1,"5"],[0,";\nle"]],"start1":252,"start2":252,"length1":9,"length2":9}]}]},{"timestamp":1741445323680,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"peed = -"],[-1,"10"],[1,"9"],[0,";\nlet ro"]],"start1":248,"start2":248,"length1":18,"length2":17},{"diffs":[[0,"(), "],[1,"angle, "],[0,"distanc"],[-1,"e, angl"],[0,"e].j"]],"start1":4774,"start2":4774,"length1":22,"length2":22},{"diffs":[[0,"e(),"],[-1," 0,"],[0," angle"],[1,", 0"],[0,"].jo"]],"start1":4933,"start2":4933,"length1":17,"length2":17},{"diffs":[[0,"    basic.pause("],[-1,"5"],[1,"10"],[0,"0)\n    }\n})\n\n\nfu"]],"start1":5005,"start2":5005,"length1":33,"length2":34}]}]},{"timestamp":1741445727416,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"c.pause("],[-1,"2"],[1,"5"],[0,"0)\n    }"]],"start1":3466,"start2":3466,"length1":17,"length2":17}]}]},{"timestamp":1741459650720,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," }\n\n        "],[1,"basic.pause(50)"],[0,"\n    }\n})\n\n\n"]],"start1":4998,"start2":4998,"length1":24,"length2":39}]}]},{"timestamp":1741459700737,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," }\n\n        "],[-1,"basic.pause(20)"],[0,"\n    }\n})\n\n\n"]],"start1":4998,"start2":4998,"length1":39,"length2":24}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,": \"Sonar"],[1," 3"],[0,"\",\n    \""]],"start1":12,"start2":12,"length1":16,"length2":18},{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":322,"start2":322,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1741425074636,"editorVersion":"7.0.57","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1741426883068,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n};\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;0;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br;')\n            bluetooth.uartWriteLine('vc;import_end;')\n            mode = 0;\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"1\" || commandName == \"2\") {\n            if (commandName == \"1\") {\n                if (mode != 0) {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 10)\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                switchMode(1)\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        \n        basic.pause(50)\n    }\n})\n\nbasic.forever(function () {\n    if (mode == 0) {\n        sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n    }\n})","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1741428694713,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n};\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;0;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br;')\n            bluetooth.uartWriteLine('vc;import_end;')\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"1\" || commandName == \"2\") {\n            if (commandName == \"1\") {\n                if (mode != 0) {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 10)\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                switchMode(1)\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue.shift())\n        basic.pause(50)\n    }\n})\n\nlet minDistance = 10;\nlet maxDistance = 50;\n\nbasic.forever(function () {\n    if (mode == 0) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        \n        if (distance > minDistance && distance < maxDistance) {\n            let row = [\n                input.runningTime(),\n                distance\n            ]\n\n            sendQueue.push(row.join(','))\n            basic.pause(50)\n        }\n    }\n})\n\nlet rotationDuration = 0;\n\nfunction rotationDurationMeasurement() {\n    \n}","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1741434438314,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n};\n\nlet minDistance = 10;\nlet maxDistance = 50;\nlet rotationSpeed = 10;\nlet rotationDuration = 0;\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;0;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;b;5;0;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;3;1;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;0;0;4;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br,bl;')\n            bluetooth.uartWriteLine('vc;import_end;')\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n        } else if (commandName == \"1\" || commandName == \"2\") {\n            if (commandName == \"1\") {\n                if (mode != 0) {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 10)\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                switchMode(1)\n            } else if (commandName == \"3\") {\n                switchMode(3)\n\n                if (mode == 3) {\n                    rotationDurationMeasurement()\n                }\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue.shift())\n        basic.pause(50)\n    }\n})\n\n\n\nbasic.forever(function () {\n    if (mode == 0) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        \n        if (distance > minDistance && distance < maxDistance) {\n            let row = [\n                input.runningTime(),\n                distance\n            ]\n\n            sendQueue.push(row.join(','))\n            basic.pause(50)\n        }\n    }\n})\n\n\nfunction rotationDurationMeasurement() {\n    let startTime: number;\n    let endTime: number;\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n    let nr = 0;\n\n    while (!startTime && !endTime && mode == 3) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < 10) {\n            if (!startTime) {\n                startTime =  input.runningTime()\n            } else {\n                endTime = input.runningTime()\n            }\n        }\n\n        basic.pause(50)\n    }\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n    rotationDuration = endTime - startTime\n\n    sendQueue.push([null, null, rotationDuration].join(','))\n}","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1741436246372,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n    2: 3,\n};\n\nlet minDistance = 10;\nlet maxDistance = 50;\nlet rotationSpeed = 10;\nlet rotationDuration = 0;\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;0;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;b;5;0;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;3;1;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;0;0;4;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br,bl;')\n            bluetooth.uartWriteLine('vc;import_end;')\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n        } else if (commandName == \"1\" || commandName == \"2\" || commandName == \"3\") {\n            if (commandName == \"1\") {\n                if (mode != 0) {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 10)\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                switchMode(1)\n            } else if (commandName == \"3\") {\n                switchMode(2)\n\n                if (mode == 2) {\n                    rotationDurationMeasurement()\n                }\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue.shift())\n        basic.pause(50)\n    }\n})\n\n\n\nbasic.forever(function () {\n    if (mode == 0) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        \n        if (distance > minDistance && distance < maxDistance) {\n            let row = [\n                input.runningTime(),\n                distance\n            ]\n\n            sendQueue.push(row.join(','))\n            basic.pause(50)\n        }\n    }\n})\n\n\nfunction rotationDurationMeasurement() {\n    let startTime: number;\n    let endTime: number;\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n    let nr = 0;\n\n    while (!startTime && !endTime && mode == 2) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < 10) {\n            if (!startTime) {\n                startTime =  input.runningTime()\n            } else {\n                endTime = input.runningTime()\n            }\n        }\n\n        basic.pause(50)\n    }\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n    rotationDuration = endTime - startTime\n\n    sendQueue.push([null, null, rotationDuration].join(','))\n}","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1741438047201,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n    2: 3,\n};\n\nlet minDistance = 10;\nlet maxDistance = 50;\nlet rotationSpeed = 10;\nlet rotationDuration = 0;\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;0;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;b;5;0;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;3;1;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;0;0;4;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br,bl;')\n            bluetooth.uartWriteLine('vc;import_end;')\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n        } else if (commandName == \"1\" || commandName == \"2\" || commandName == \"3\") {\n            if (commandName == \"1\") {\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                if (mode != 1) {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n                switchMode(1)\n            } else if (commandName == \"3\") {\n                switchMode(2)\n\n                // if (mode == 2) {\n                //     rotationDurationMeasurement()\n                // }\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue.shift())\n        basic.pause(50)\n    }\n})\n\nbasic.forever(function () {\n    if (mode == 0 && signalFrequency) {\n        \n    }\n})\n\nlet signalFrequency = 0;\n\nbasic.forever(function () {\n    if (mode == 0) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        \n        if (distance > minDistance && distance < maxDistance) {\n            let row = [\n                input.runningTime(),\n                distance\n            ]\n\n            if (distance < 40) {\n                signalFrequency = 50080\n            }\n\n            sendQueue.push(row.join(','))\n            basic.pause(50)\n        } else {\n            signalFrequency = 0\n        }\n    }\n})\n\n\nfunction rotationDurationMeasurement() {\n    let startTime: number = 0;\n    let endTime: number = 0;\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n    let nr = 0;\n    let trigger = false;\n\n    while ((!startTime || !endTime) && mode == 2) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < 10) {\n            if (!trigger) {\n                if (!startTime) {\n                    startTime = input.runningTime()\n                } else {\n                    endTime = input.runningTime()\n                }\n            }\n\n            trigger = true\n        } else {\n            trigger = false\n        }\n\n        basic.pause(50)\n    }\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n    rotationDuration = endTime - startTime\n\n    sendQueue.push([null, null, rotationDuration].join(','))\n    switchMode(2)\n}","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1741439943947,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n    2: 3,\n};\n\nlet minDistance = 10;\nlet maxDistance = 50;\nlet rotationSpeed = 10;\nlet rotationDuration = 0;\n\nmusic.setVolume(50)\n\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    if (modeToButton[mode]) {\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    }\n\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;0;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;b;5;0;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;3;1;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;0;0;4;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br,bl;')\n            bluetooth.uartWriteLine('vc;import_end;')\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n        } else if (commandName == \"1\" || commandName == \"2\" || commandName == \"3\") {\n            if (commandName == \"1\") {\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                if (mode != 1) {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n                switchMode(1)\n            } else if (commandName == \"3\") {\n                switchMode(2)\n\n                // if (mode == 2) {\n                //     rotationDurationMeasurement()\n                // }\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue.shift())\n        basic.pause(50)\n    }\n})\n\nlet lastSignalTime = 0;\n\nbasic.forever(function () {\n    if (mode == 0 && signalFrequency) {\n        if (input.runningTime() - lastSignalTime - signalFrequency > 0) {\n            music.play(music.tonePlayable(Note.C, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n            lastSignalTime = input.runningTime()\n        }\n    }\n})\n\nlet signalFrequency = 0;\n\nbasic.forever(function () {\n    if (mode == 0) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        \n        if (distance > minDistance && distance < maxDistance) {\n            let row = [\n                input.runningTime(),\n                distance\n            ]\n\n            signalFrequency = 25 * distance - 300\n\n            sendQueue.push(row.join(','))\n            basic.pause(50)\n        } else {\n            signalFrequency = 0\n        }\n    }\n})\n\n\nfunction rotationDurationMeasurement() {\n    let startTime: number = 0;\n    let endTime: number = 0;\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n    let nr = 0;\n    let trigger = false;\n\n    while ((!startTime || !endTime) && mode == 2) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < 10) {\n            if (!trigger) {\n                if (!startTime) {\n                    startTime = input.runningTime()\n                } else {\n                    endTime = input.runningTime()\n                }\n            }\n\n            trigger = true\n        } else {\n            trigger = false\n        }\n\n        basic.pause(50)\n    }\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n    rotationDuration = endTime - startTime\n\n    sendQueue.push([null, null, rotationDuration].join(','))\n    switchMode(2)\n}","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1741442721837,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n    2: 3,\n};\n\nlet minDistance = 10;\nlet maxDistance = 50;\nlet rotationSpeed = 10;\nlet rotationDuration = 0;\n\nmusic.setVolume(50)\n\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    if (modeToButton[mode]) {\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    }\n\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;0;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;b;5;0;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;3;1;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;0;0;4;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br,bl;')\n            bluetooth.uartWriteLine('vc;import_end;')\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n        } else if (commandName == \"1\" || commandName == \"2\" || commandName == \"3\") {\n            if (commandName == \"1\") {\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                if (mode != 1) {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n                switchMode(1)\n            } else if (commandName == \"3\") {\n                switchMode(2)\n\n                // if (mode == 2) {\n                //     rotationDurationMeasurement()\n                // }\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue.shift())\n        basic.pause(50)\n    }\n})\n\nlet lastSignalTime = 0;\n\nbasic.forever(function () {\n    if (mode == 0 && signalFrequency) {\n        if (input.runningTime() - lastSignalTime - signalFrequency > 0) {\n            music.play(music.tonePlayable(Note.C, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n            lastSignalTime = input.runningTime()\n        }\n    }\n})\n\nlet signalFrequency = 0;\n\nbasic.forever(function () {\n    if (mode == 0) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        \n        if (distance > 0 && distance < maxDistance) {\n            signalFrequency = 25 * distance - 300\n\n            sendQueue.push([input.runningTime(), distance].join(','))\n        } else {\n            signalFrequency = 0\n        }\n\n\n        basic.pause(200)\n    }\n})\n\n\nfunction rotationDurationMeasurement() {\n    let startTime: number = 0;\n    let endTime: number = 0;\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n    let nr = 0;\n    let trigger = false;\n\n    while ((!startTime || !endTime) && mode == 2) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < 10) {\n            if (!trigger) {\n                if (!startTime) {\n                    startTime = input.runningTime()\n                } else {\n                    endTime = input.runningTime()\n                }\n            }\n\n            trigger = true\n        } else {\n            trigger = false\n        }\n\n        basic.pause(50)\n    }\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n    rotationDuration = endTime - startTime\n\n    sendQueue.push([null, null, rotationDuration].join(','))\n    switchMode(2)\n}","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1741444523418,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n    2: 3,\n};\n\nlet minDistance = 10;\nlet maxDistance = 50;\nlet rotationSpeed = 10;\nlet rotationDuration = 0;\nlet signalFrequency = 0;\nlet sonarStartTime = 0;\n\nmusic.setVolume(50)\n\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    if (modeToButton[mode]) {\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    }\n\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;1;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;b;5;0;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;3;1;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;0;0;4;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br,bl;')\n            bluetooth.uartWriteLine('vc;import_end;')\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"1\" || commandName == \"2\" || commandName == \"3\") {\n            if (commandName == \"1\") {\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                if (mode != 1) {\n                    if (rotationDuration) {\n                        sonarStartTime = input.runningTime()\n                        wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n                    }\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n                switchMode(1)\n            } else if (commandName == \"3\") {\n                switchMode(2)\n\n                if (mode == 2) {\n                    rotationDurationMeasurement()\n                }\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue.shift())\n        basic.pause(50)\n    }\n})\n\nlet lastSignalTime = 0;\n\nbasic.forever(function () {\n    if (mode == 0 && signalFrequency) {\n        if (input.runningTime() - lastSignalTime - signalFrequency > 0) {\n            music.play(music.tonePlayable(Note.C, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n            lastSignalTime = input.runningTime()\n        }\n    }\n})\n\nlet lastAngle = 0;\n\nbasic.forever(function () {\n    if (mode == 0) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        \n        if (distance > 0 && distance < maxDistance) {\n            signalFrequency = 25 * distance - 300\n            sendQueue.push([input.runningTime(), distance].join(','))\n        } else {\n            signalFrequency = 0\n        }\n\n        basic.pause(200)\n    } else if (mode == 1) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        let angle = ((input.runningTime() - sonarStartTime) % rotationDuration) * 360 / rotationDuration\n\n        let angleCounter = angle - lastAngle;\n\n        if (angleCounter < 0) {\n            \n        }\n\n        if (distance > 0 && distance < maxDistance || angleCounter >= 10) {\n            sendQueue.push([input.runningTime(), angle, distance].join(','))\n\n            lastAngle = angle;\n        } else if (angleCounter >= 10) {\n            sendQueue.push([input.runningTime(), angle, 0].join(','))\n            lastAngle = angle;\n        }\n\n        basic.pause(100)\n    }\n})\n\n\nfunction rotationDurationMeasurement() {\n    let startTime: number = 0;\n    let endTime: number = 0;\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n    let nr = 0;\n    let trigger = false;\n\n    while ((!startTime || !endTime) && mode == 2) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < 10) {\n            if (!trigger) {\n                if (!startTime) {\n                    startTime = input.runningTime()\n                } else {\n                    endTime = input.runningTime()\n                }\n            }\n\n            trigger = true\n        } else {\n            trigger = false\n        }\n\n        basic.pause(50)\n    }\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n    rotationDuration = endTime - startTime\n\n    sendQueue.push('rotation;' + rotationDuration)\n    switchMode(2)\n}","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}},{"timestamp":1741459650720,"editorVersion":"7.0.57","text":{"main.ts":"let latestCommands: { [key: string]: number } = {}\n\nlet mode: number = null;\nlet lastMode: number = null;\n\nconst modeToButton: { [key: number]: number } = {\n    0: 1,\n    1: 2,\n    2: 3,\n};\n\nlet minDistance = 10;\nlet maxDistance = 50;\nlet rotationSpeed = -10;\nlet rotationDuration = 0;\nlet signalFrequency = 0;\nlet sonarStartTime = 0;\n\nmusic.setVolume(50)\n\n\nfunction switchMode(newMode: number) {\n    lastMode = newMode\n    if (modeToButton[mode]) {\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[mode] + ';1;0;')\n    }\n\n    if (mode !== newMode) {\n        mode = newMode\n        bluetooth.uartWriteLine('vc;b;' + modeToButton[newMode] + ';1;1;')\n    } else {\n        mode = null\n    }\n}\n\n\nbasic.clearScreen()\n\nbluetooth.startUartService()\n\nbluetooth.onBluetoothConnected(function () {\n})\n\nbluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    let command = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n    let commadParts = command.split(\"=\")\n\n    latestCommands[commadParts[0]] = parseFloat(commadParts[1])\n})\n\nbasic.forever(function () {\n    while (Object.keys(latestCommands).length) {\n        let commandName = Object.keys(latestCommands)[0]\n        let commandValue = latestCommands[commandName]\n        delete latestCommands[commandName];\n\n        if (commandName == \"-v\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n            bluetooth.uartWriteLine('vc;import_start;')\n            bluetooth.uartWriteLine('vc;init;')\n            bluetooth.uartWriteLine('vc;sr;1;-100;100;1;0;0;0;;')\n            bluetooth.uartWriteLine('vc;b;1;1;0;<i class=\"fa-solid fa-car-side\"></i>;')\n            bluetooth.uartWriteLine('vc;b;2;1;0;<i class=\"fa-solid fa-satellite-dish\"></i>;')\n            bluetooth.uartWriteLine('vc;b;5;0;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;3;1;0;<i class=\"fa-solid fa-clock-rotate-left\"></i>;')\n            bluetooth.uartWriteLine('vc;b;4;0;0;4;')\n            bluetooth.uartWriteLine('vc;il;-1;')\n            bluetooth.uartWriteLine('vc;ir;1;')\n            bluetooth.uartWriteLine('vc;show;sr,br,bl;')\n            bluetooth.uartWriteLine('vc;import_end;')\n        } else if (commandName == \"oy\" || commandName == \"sl\" || commandName == \"jry\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"ox\" || commandName == \"sr\" || commandName == \"jrx\") {\n            wuKong.setMotorSpeed(wuKong.MotorList.M1, commandValue)\n        } else if (commandName == \"1\" || commandName == \"2\" || commandName == \"3\") {\n            if (commandName == \"1\") {\n                switchMode(0)\n            } else if (commandName == \"2\") {\n                if (mode != 1) {\n                    if (rotationDuration) {\n                        sonarStartTime = input.runningTime()\n                        wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n                    }\n                } else {\n                    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n                }\n                switchMode(1)\n            } else if (commandName == \"3\") {\n                switchMode(2)\n\n                if (mode == 2) {\n                    rotationDurationMeasurement()\n                }\n            }\n        }\n    }\n})\n\n// Queue\nlet sendQueue: string[] = []\nbasic.forever(function () {\n    while(sendQueue.length) {\n        bluetooth.uartWriteLine(sendQueue.shift())\n        basic.pause(50)\n    }\n})\n\nlet lastSignalTime = 0;\n\nbasic.forever(function () {\n    if (mode == 0 && signalFrequency) {\n        if (input.runningTime() - lastSignalTime - signalFrequency > 0) {\n            music.play(music.tonePlayable(Note.C, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n            lastSignalTime = input.runningTime()\n        }\n    }\n})\n\nlet lastAngle = 0;\nlet triggerAngle = 5;\n\nbasic.forever(function () {\n    if (mode == 0) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        \n        if (distance > 0 && distance < maxDistance) {\n            signalFrequency = 25 * distance - 300\n            sendQueue.push([input.runningTime(), distance].join(','))\n        } else {\n            signalFrequency = 0\n        }\n\n        basic.pause(200)\n    } else if (mode == 1) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n        let angle = ((input.runningTime() - sonarStartTime) % rotationDuration) * 360 / rotationDuration\n\n        let angleCounter = angle - lastAngle;\n\n        if (angleCounter < 0) {\n            angleCounter = 360 + angle - lastAngle;\n        }\n\n        if (distance > 0 && distance < maxDistance || angleCounter >= triggerAngle) {\n            sendQueue.push([input.runningTime(), distance, angle].join(','))\n\n            lastAngle = angle;\n        } else if (angleCounter >= triggerAngle) {\n            sendQueue.push([input.runningTime(), 0, angle].join(','))\n            lastAngle = angle;\n        }\n\n        basic.pause(50)\n    }\n})\n\n\nfunction rotationDurationMeasurement() {\n    let startTime: number = 0;\n    let endTime: number = 0;\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, rotationSpeed)\n    let nr = 0;\n    let trigger = false;\n\n    while ((!startTime || !endTime) && mode == 2) {\n        let distance = sonar.ping(DigitalPin.P0, DigitalPin.P1, PingUnit.Centimeters)\n\n        if (distance > 0 && distance < 10) {\n            if (!trigger) {\n                if (!startTime) {\n                    startTime = input.runningTime()\n                } else {\n                    endTime = input.runningTime()\n                }\n            }\n\n            trigger = true\n        } else {\n            trigger = false\n        }\n\n        basic.pause(50)\n    }\n\n    wuKong.setMotorSpeed(wuKong.MotorList.M1, 0)\n\n    rotationDuration = endTime - startTime\n\n    sendQueue.push('rotation;' + rotationDuration)\n    switchMode(2)\n}","README.md":"","pxt.json":"{\n    \"name\": \"Sonar 3\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"bluetooth\": \"*\",\n        \"wuKong\": \"github:elecfreaks/pxt-wukong#v1.5.8\",\n        \"pxt-sonar\": \"github:microsoft/pxt-sonar#v0.0.6\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 1,\n                    \"whitelist\": 0,\n                    \"security_level\": null\n                }\n            }\n        }\n    }\n}\n"}}],"shares":[],"lastSaveTime":1741459775237}